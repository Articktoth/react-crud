{"version":3,"sources":["Global.js","components/Todos.js","components/Create.js","components/Edit.js","components/Delete.js","components/Header.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["Global","url","Todos","state","todos","status","getTodos","axios","get","then","res","setState","data","getTodo","id","_id","todo","article","catch","err","this","length","listTodos","map","className","key","name","description","locale","fromNow","date","to","icon","faEdit","faTrash","Component","Create","nameRef","React","createRef","descriptionRef","changeState","current","value","saveTodo","e","preventDefault","post","onSubmit","htmlFor","type","ref","onChange","Edit","todoId","put","props","match","params","defaultValue","Delete","deleteTodo","delete","Header","Router","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c09be8c3.chunk.js","sourcesContent":["let Global = {\r\n    url: 'https://todoapp-toth.herokuapp.com/api/'\r\n}\r\n\r\nexport default Global;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport Global from '../Global';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport Moment from 'react-moment';\r\nimport 'moment/locale/es';\r\n\r\nclass Todos extends Component {\r\n\r\n    url = Global.url;\r\n\r\n    state = {\r\n        todos: [],\r\n        status: null\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.getTodos();\r\n    }\r\n\r\n    getTodos = () => {\r\n        axios.get(this.url + 'get-all-todo')\r\n            .then(res => {\r\n                this.setState({\r\n                    todos: res.data.todos\r\n                });\r\n            });\r\n    }\r\n\r\n    getTodo = () => {\r\n        let id = this.state.todos._id;\r\n\r\n        axios.get(this.url + 'todo/' + id)\r\n            .then(res => {\r\n                this.setState({\r\n                    todo: res.data.article,\r\n                    status: 'success'\r\n                });\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    todo: false,\r\n                    status: 'success'\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.todos.length >= 1) {\r\n            let listTodos = this.state.todos.map((todo) => {\r\n                return (\r\n                    <div className=\"todos\" key={todo._id}>\r\n                        {\r\n                            <div className=\"todo\">\r\n                                <h2 className=\"todo-name\">{todo.name}</h2>\r\n                                <p className=\"todo-description\">{todo.description}</p>\r\n                                <Moment locale=\"es\" fromNow className=\"date\">\r\n                                    {todo.date}\r\n                                </Moment>\r\n                                <div className=\"icons\">\r\n                                    <Link to={'/edit/' + todo._id}>\r\n                                        <FontAwesomeIcon className=\"icon icon-edit\" icon={faEdit} />\r\n                                    </Link>\r\n                                    <Link to={'/delete/' + todo._id}> <FontAwesomeIcon className=\"icon icon-trash\" icon={faTrash} /> </Link>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n\r\n                    </div>\r\n                );\r\n            })\r\n\r\n            return (\r\n                <div>{listTodos}</div>\r\n            );\r\n\r\n        } else if (this.state.todos.length === 0 && this.state.status === null) {\r\n            return (\r\n                <div className=\"no-list\">\r\n                    <h2>No hay tareas para mostrar</h2>\r\n                </div>\r\n            );\r\n        }else {\r\n            return (\r\n                <h2>Cargando...</h2>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Global from '../Global';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Create extends Component {\r\n    url = Global.url;\r\n\r\n    nameRef = React.createRef();\r\n    descriptionRef = React.createRef();\r\n\r\n    state = {\r\n        todo: {},\r\n        status: null\r\n    };\r\n\r\n    changeState = () => {\r\n        this.setState({\r\n            todo: {\r\n                name: this.nameRef.current.value,\r\n                description: this.descriptionRef.current.value\r\n            }\r\n        });\r\n    }\r\n\r\n    saveTodo = (e) => {\r\n        e.preventDefault();\r\n        this.changeState();\r\n        axios.post(this.url + 'create', this.state.todo)\r\n            .then(res => {\r\n                if (res.data.todo) {\r\n                    this.setState({\r\n                        todo: res.data.todo,\r\n                        status: 'success'\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        status: 'failed'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.state.status === 'success') {\r\n            return <Redirect to=\"/\" />;\r\n        }\r\n\r\n        return (\r\n            <form onSubmit={this.saveTodo}>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input type=\"text\" ref={this.nameRef} name=\"name\" onChange={this.changeState} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"description\">Description</label>\r\n                    <textarea ref={this.descriptionRef} name=\"description\" onChange={this.changeState} />\r\n                </div>\r\n\r\n                <input type=\"submit\" value=\"Save\" />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Create;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Global from '../Global';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Edit extends Component {\r\n    url = Global.url;\r\n\r\n    todoId = null;\r\n\r\n    nameRef = React.createRef();\r\n    descriptionRef = React.createRef();\r\n\r\n    state = {\r\n        todo: {},\r\n        status: null\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.todoId = this.props.match.params.id;\r\n        this.getTodo(this.todoId);\r\n    }\r\n\r\n    getTodo = (id) => {\r\n        axios.get(this.url + 'get-todo/' + id)\r\n            .then(res => {\r\n                this.setState({\r\n                    todo: res.data.todo\r\n                })\r\n            });\r\n    }\r\n\r\n    changeState = () => {\r\n        this.setState({\r\n            todo: {\r\n                name: this.nameRef.current.value,\r\n                description: this.descriptionRef.current.value\r\n            }\r\n        });\r\n    }\r\n\r\n    saveTodo = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.changeState();\r\n\r\n        axios.put(this.url + 'update/' + this.todoId, this.state.todo)\r\n            .then(res => {\r\n                if (res.data.todo) {\r\n                    this.setState({\r\n                        todo: res.data.todo,\r\n                        status: 'success'\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        status: 'failed'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n        let todo = this.state.todo;\r\n\r\n        if (this.state.status === 'success') {\r\n            return <Redirect to=\"/\" />;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                    <form onSubmit={this.saveTodo}>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"name\">Name</label>\r\n                            <input type=\"text\" defaultValue={todo.name} ref={this.nameRef} name=\"name\" onChange={this.changeState} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"description\">Description</label>\r\n                            <textarea ref={this.descriptionRef} defaultValue={todo.description} name=\"description\" onChange={this.changeState} />\r\n                        </div>\r\n\r\n                        <input type=\"submit\" value=\"Save\" />\r\n                    </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Edit;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Global from '../Global';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Delete extends Component {\r\n    url = Global.url;\r\n\r\n    todoId = null;\r\n\r\n    nameRef = React.createRef();\r\n    descriptionRef = React.createRef();\r\n\r\n    state = {\r\n        todo: {},\r\n        status: null\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.todoId = this.props.match.params.id;\r\n        this.getTodo(this.todoId);\r\n        this.deleteTodo();\r\n    }\r\n\r\n    getTodo = (id) => {\r\n        axios.get(this.url + 'get-todo/' + id)\r\n            .then(res => {\r\n                this.setState({\r\n                    todo: res.data.todo\r\n                })\r\n            });\r\n    }\r\n\r\n    changeState = () => {\r\n        this.setState({\r\n            todo: {\r\n                name: this.nameRef.current.value,\r\n                description: this.descriptionRef.current.value\r\n            }\r\n        });\r\n    }\r\n\r\n    deleteTodo = () => {\r\n        axios.delete(this.url + 'delete/' + this.todoId, this.state.todo)\r\n            .then(res => {\r\n                this.setState({\r\n                    todos: res.data.todos,\r\n                    status: 'deleted'\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.state.status === 'deleted') {\r\n            return <Redirect to=\"/\" />;\r\n        }\r\n\r\n        return (\r\n            <h2>Deleted...</h2>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Delete;","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"nav\">\r\n\r\n                <NavLink className=\"link\" to=\"/\">Inicio</NavLink>\r\n                <NavLink className=\"link\" to=\"/create\">Crear tarea</NavLink>\r\n\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\n//Components\r\nimport Todos from './components/Todos';\r\nimport Create from './components/Create';\r\nimport Edit from './components/Edit';\r\nimport Delete from './components/Delete';\r\nimport Header from './components/Header';\r\n\r\nclass Router extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Header />\r\n\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Todos} />\r\n                    <Route exact path=\"/todos\" component={Todos} />\r\n                    <Route exact path=\"/create\" component={Create} />\r\n                    <Route exact path=\"/delete/:id\" component={Delete} />\r\n                    <Route exact path=\"/edit/:id\" component={Edit} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Router;\r\n","import React from 'react';\nimport './assets/App.css';\n\nimport Router from './Router';\n\nfunction App() {\n  return (\n    <div>\n\n      <Router />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}